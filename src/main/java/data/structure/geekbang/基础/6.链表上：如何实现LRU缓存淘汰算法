问题：学习链表前，先来看下LRU淘汰算法。缓存被用在各种场景来提高访问效率，硬件软件中都被广泛使用，想CPU缓存、数据库缓存、浏览器缓存等。
但是缓存都有大小限制，当缓存占满时，哪些数据清理，哪些数据保留，需要由淘汰策略决定：常见策略：先进先出（FIFO）、最少使用（LFU）、最近最少使用（LRU）

链表不需要连续空间，通过指针将一组零散的内存块连起来用，把内存块成为链表的结点，为了将链表串起来，每个结点还要存在下一个结点的地址（后继指针next）
常见的链表有：单链表、双向链表、循环链表。

单链表：尾结点的next指向null
循环链表：尾结点next指向头节点
双向链表：每个节点pre指向上一个节点，next指向下一个节点；LinkedHashMap底层就是双向链表

链表的插入删除只会影响结点的前后两个阶段，时间复杂度是O(1),但是查询的话就是O(n)了，因为不能像数据那样根据首地址和下标寻址查询，而是需要根据next一个一个遍历。

单链表 vs 双向链表
1.在某一个结点位置插入/删除一个结点，双向链表可以通过pre找到前一个结点，时间复杂度O(1),但是单链表还有一个一个遍历出来，遍历复杂度O(n)，所以总的时间复杂度O(n)
2.对于有序链表，可以根据查询数据的大小决定向前或向后查询，比单链表少查询一般数据
3.双向链表缺点就是更加占用内存，多个指向头结点的pre，这也是"空间换时间"的思路，对于执行慢的程序使用空间换时间（缓存）

数组 vs 链表
1.数组查询快，链表增删快；数组是内存空间连续的，对CPU友好，可以预读来提高查询效率，但链表不行
    CPU从内存读取数据时，会先加载到CPU缓存，从内存中读取数据时，是读的一个数据块（64b），下次查询会从CPU缓存查询，没有再去内存中查，然后再放入CPU缓存
    这就实现了比直接访问内存快。而数组是连续内存存储的，加载数据块时，可能数组后几个元素一块加载了，查询时直接查CPU缓存，所以查询更快
2.数组需要连续内存，内存不够就申请不下来，另外扩容非常费时，需要新建数组，源数据拷贝，而链表天然支持扩缩容；但是链表占用内存更大（要存pre、next）
3.对链表频繁插入、删除会导致内存频繁申请、释放，容易造成内存碎片，Java中，会造成频繁GC

解答开始的问题：
维护一个有序单链表，越靠近尾部的是越早访问的，当一个新数据被访问时，从头结点遍历链表
1.如果该数据被之前链表缓存命中，删除之前数据，然后插入头部
2.如果数据没有在链表中：
    1.缓存未满，插入链表头部
    2.缓存已满，删除链表尾结点，新数据插入头部
