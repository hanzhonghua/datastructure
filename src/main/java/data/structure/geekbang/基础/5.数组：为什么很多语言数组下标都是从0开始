先看一个问题：为什么很多语言中数组的下标都是从0开始的？

数组：一种线性结构，用一组连续内存空间存储具有相同类型的数据

支持随机访问，时间复杂度是O(1)，但因为是连续的，所以插入和删除都比较低效，因为需要移动元素保证连续

问题1：数组是如何根据下标实现随机访问的？
答：如数组：int[] a = new int[10]; 存储数据时候，计算机会给数组分配一块连续空间，假设是1000-1009，内存的首地址是base_address=1000。
    计算机会给每个内存单元分配一个地址，通过这个地址来访问内存中的数据。当计算机随机访问数据时，通过以下寻址公式：
    a[i]_address = base_address(数组内存首地址) + i * data_type_size(表示数组中每个元素大小)；
    如果下标是从1开始的话，计算公式就会变成：a[i]_address = base_address + （i-1） * data_type_size；多了一次-1的操作，
    为了少一次减法操作，从0开始

注意点：
1.注意数组下标越界
2.查找时间复杂度，按下标随机查找O(1)，二分查找O(logn)，插入和删除的最好复杂度O(1)，最坏是O(n)，平均复杂度都是O(n)
3.业务开发中基本不会使用数组，而是使用包装过的ArrayList，提供了各种封装，动态扩容等，但是涉及到开装箱，性能比不了数组，一般在基础组件中会用到数组，性能优化到极致
